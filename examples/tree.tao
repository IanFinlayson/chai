# define binary search tree structure
type Tree<T> = Leaf | Node of (T, Tree<T>, Tree<T>)

# insert a value into a tree
def insert<T>(tree Tree<T>, value T) Tree<T>:
    match tree:
        case Leaf:
            return Node (value, Leaf, Leaf)
        case Node (root, left, right):
            if value < root:
                return Node (root, insert(left, value), right)
            else:
                return Node (root, left, insert(right, value))

# do an in-order walk of the tree
def traverse<T>(tree Tree<T>):
    match tree:
        case Leaf:
            return
        case Node (root, left, right):
            traverse(left)
            print(root)
            traverse(right)

# test this out
def main():
    let tree = reduce(insert, Leaf, [5, 6, 1, 99, 23, 42, 2, 18, 78])
    traverse(tree)

