Re-write:
    - lexer
    - parser
    - bytecode generator
    - vm interpreter


Consider the type system more carefully:
    - What exactly does polymorphism look like?  Haskell style type classes?
      Java style interaces/classes?  Do the built-in types belong to classes?
      Swift protocols are cool...

Re-think ranges:
    Do Haskell stype to allow a step and infinite ranges?
        [1,2..10] = [1,2,3,4,5,6,7,8,9,10]
        [1,3..10] = [1,3,5,7,9]
        [4,3..0]  = [4,3,2,1,0]
        [0,5..]   = [0,5,10,15,20,25,30,35...  -- infinite
        [1,1..]   = [1,1,1,1,1,1,1,1,1,1,1...  -- infinite
    Or math style [) (] type things?  Not sure about the asymmetery of that...
    Or just use the range function?
    Should produce generators eventually either way!

Things to add into language:
    - combine up def and match stmts??
    - generators, lazy sequences, yield, how to encode in type system?
        Idea: we use -> for normal function return
              and ->* or maybe >> for yield return types

        ACTUALLY no, the generator is not a thing with the function, but rather
        the type being produced.  Like a range or list comp can also make a generator
        so it should be something like *Int or `Float` or something to indicae that the
        thing being returned is a generaor of a type.

        OR maybe it is a function thing and a range like [1 ..] actually produces
        a function which returns the next in a series each time you call it.

    - classes or alternative...
    - libraries
    - multiple fors in list comprehension (like python)?
    - maybe allow Int? to be an alias for Option<Int> (Swift does this)

Math stuff:
    - use bigints for integers like python?

