0. Make a regression test setup with the programs we have so far

1. Decide on variadic functions, keyword and default arguments vs. currying, and how function types look
    1.1 Document in the docs
    1.2 Make lexer changes
    1.3 Make parser changes
    1.4 Put in some tests

2. Double check our destructures and make sure they work / work with for loops as we like
    2.1 Fix any issues and make tests for them

3. Begin writing the type checker
    3.1 Start with simple programs and build out from there
    3.2 We can look at how it worked in the old version if we want to
    3.3 Make errors look nice and put in tests (good AND bad progs)

4. Type error/warning issues
    4.1 Make sure that the typing for empty literals makes sense and is documented
    4.1 Decide if non-exhaustive matches are an error (for unions at least)
    4.2 Decide how things like loop-able, call-able, hash-able types are reprensented
            we should do this well so it can integrate with traits later on

5. Afer type checking works and we feel good about it, pick a new goal:
    5.1 Decide on implementation goal (tree-walk, vm, etc.)
    5.2 Consider adding new features to language
        5.2.1 Pipeline operator
        5.2.2 Traits (documented below)









Traits:
    - decide what to do for run-time polymorphism
    - add trait stuff into the parser, including the implement block
    - can we make the implement block add methods to a type separate from any trait?
      like we could add our own methods to String or List....
    - think through the traits built into the language:
        - like Show, Ord, etc. type classes in Haskell
        - maybe Generator is a trait so people can make classes that are generators
        - also callable, addable, etc. are traits??? not sure - this can provide operator overloading essentially

THIS IS FROM THE overview docs of when I was putting this in.

## Traits -- this is left for now, but we are not implementing this yet!

Type parameters provide static polymorphism, while Traits provide dynamic
polymorphism.  A trait is similar to an interface in Java.  For example,
suppose we are making graphical program where we want a list of things that
are drawn to the screen, but each will do so differently.

We introduce a trait which provides the needed functionality:

```
trait Drawable:
    def draw(s Screen)
    def getLayer() Int
```

We can then indicate that a class has said trait:

```
class Character implement Drawable:
    var bitmap Image
    var x = 0
    var y = 0

    def Character(x, y):
        self.x = x
        self.y = y

    def draw(s Screen) Bool:
        self.bitmap.draw(s)
        return True

    # presumably this is used for z-sorting
    def getLayer() Int:
        return 1

    def otherThing():
        print("some other method not part of trait")
```

If a class provides multiple traits, they can be separated with the & operator in the
class declaration line.

We can also implement a trait for a class after it has been created.  For
instance, we could have done the above like this instead:

```
class Character:
    var bitmap Image
    var x = 0
    var y = 0

    def Character(x, y):
        self.x = x
        self.y = y

    def otherThing():
        print("some other method not part of trait")
```

And provide the code to make this class drawable separately, even in a
different file:

```
implement Drawable for Character c:
    def draw(s Screen) Bool:
        c.bitmap.draw(s)
        return True

    def getLayer() Int:
        return 1
```

Of course the reason to do this is to be able to write code to the polymorphic
trait.  For instance

```
var objects [Drawable]

# we can add any objects to this list that have the Drawable trait:
objects += Character()
objects += Enemy("Goblin")
objects += Enemy("Skeleton")

# we can then call the methods of the trait
sort(objects, key = lambda a, b: a.getLayer() < b.getLayer())

for obj in objects:
    obj.draw(screen)
```

Because we can implement a trait outside of the class statement, we can do so
for classes we did not write or, in fact, any type at all.  We could implement
the Drawable trait for Strings for instance:

```
implement Drawable for String s:
    def draw(s Screen):
        s.writeText(s)
    
    def getLayer() Int:
        return 0
```

Traits can thus be added for any type: those built in to the language, part of
libraries, or ones we created ourselves.

We can also indicate that a type should fulfill multiple traits by combining
them with the & operator.  For instance, the following function takes a
parameter that can be any type with both the Drawable and Updatable traits:

```
def addObjectToScene(object Drawable & Updatable):
    pass
```

If we have a set of traits we will be using often, we can also make a type alias
for it instead:

```
type Entity = Drawable & Updatable
```

